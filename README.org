#+title: DESIGN PATTERN

* Design Pattern Introduction
** Four Essential Elements:
- The *pattern name* is a handle we can use to describe problem, its solutions, and consequences in a word or two
- The *problem* describes when to apply the pattern
- The *solution* describes the elements that make up the design, their relationships, concrete design or implementation, because situations.
- The *consequences* are the results and trade offs of applying the pattern.
** Catalog of Design Patterns:
| Design Pattern          | Definition                                                                                                                                                                                                            |
|-------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Abstract Factory        | Provide an interface for creating families of related or dependent objects without specifying their concrete classes.                                                                                                 |
| Adapter                 | Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.                                                |
| Bridge                  | Decouple an abstraction from its implementation so that the two can vary independently.                                                                                                                               |
| Builder                 | Separate the construction of a complex o object from its representation so that the same construction process can create different representations.                                                                   |
| Chain of Responsibility | Avoid coupling the sender of the request to its receiver by giving more that one object a chance to handle the request. Chain  the receiving objects and pass the request along the chain until an object handles it. |
| Command                 | Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.                                                         |
| Composite               | Composite object into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects an compositions of objects uniformly.                                                      |
| Decorator               | Attach additional responsibilities to an object dynamically. Decorators provide flexible alternative to subclassing for extending functionality.                                                                      |
| Facade                  | Provide a unified interface to a set of interfaces in a subsystem. Facade defines higher-level interface that makes the subsystem easier to use.                                                                      |
| Factory Method          | Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory method lets a class defer instantiation to subclasses.                                                      |
| Flyweight               | Use sharing to support large number of fin-grained objects effeciently.                                                                                                                                               |
| Interpreter             | Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.                                                              |
| Iterator                | Provide a way to access the elements of aggregate object sequentially without exposing its underlying representation.                                                                                                 |
| Mediator                | Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and lets you vary their interaction independently.     |
| Memento                 | Without violating encapsulation, capture and externalize and object's internal state so that the object can be restored to this state later.                                                                          |
| Observer                | Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.                                                                     |
| Prototype               | Specify the kinds of objects to create using a proto-typical instance, and create new objects by copying the prototype.                                                                                               |
| Proxy                   | Provide a surrogate or placeholder for another object to control access to it.                                                                                                                                        |
| Singleton               | Ensure a class only has one instance, and provide a global point of access to it.                                                                                                                                     |
| State                   | Allow an object to alter its behaviour when the internal state changes. The object will appear to change its class.                                                                                                   |
| Strategy                | Define a family of algorithms, encapsulate each one, and make them interchangable. Strategy lets the algorithm vary independently form clients  that use it.                                                          |
| Template Method         | Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.           |
| Visitor                 | Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.     |

** Organizing the catalog
| Purpose           |            |                         |
| Creational        | Structural | Behavioral              |
|-------------------+------------+-------------------------|
| Factory Method    | Adapter    | Interpreter             |
| Abstract  Factory | Adapter    | Chain of Responsibility |
| Builder           | Bridge     | Command                 |
| Prototype         | Composite  | Iterator                |
| Singleton         | Decorator  | Mediator                |
|                   | Facade     | Memento                 |
|                   | Flyweight  | Observer                |
|                   | Proxy      | State                   |
|                   |            | Strategy                |
|                   |            | Visitor                 |


** OOP:
*** Program to an interface, not an implementation.
*** Favor object composition over class inheritance.

* Creational Patterns
- Creational design patterns abstract the instantiation process. They help make a system independent of how its objects are created, composed, and represented.
- Creational patterns become important as systems evolve to depend more on object composition than class inheritance
- First of all encapsulate the knowledge about which concrete classes the system uses.
- Second, hide how instances of these classes are created and put together.
- Consequently, the creational patterns give you a lot of flexibility in what gets created, who creates it, how it gets created, and when
- If `CreateMaze` calls a virtual functions instead of constructor calls to create the rooms, doors, and walls it requires, then you can subclass `MazeGame` and redefining these virtual functions. This approach is an example of the Factory pattern.
- If `CreateMaze` is passed an object as a parameter to use to create rooms, walls, and doors, then you can change the classes of rooms, walls, and doors by passing a different parameter. This is an example of the Abstract Factory (87) pattern.
- If `CreateMaze` is passed an object that can create a new maze in its entirety using operations for adding rooms, doors, and walls to the maze it builds, then you can use inheritance to change parts of the maze or the way the maze is built. This is an example of the Builder (97) pattern
- If `CreateMaze` is parameterized by various prototypical room, door, and wall objects, which it then copies and adds to the maze, then you can change the maze's composition by replacing these prototypical objects with different ones. This is an example of the Prototype (117) pattern.

** Abstract Factory
*** When to use:
- A system should be independent of how its products are created, composed, and represented.
- A system should be configured with one of multiple families of products.
- A family of related product objects is designed to be used together, and you need to eforce this constraint.
- You want to provide a class library of products, and you want to reveal just their interfaces, not their implementations.

*** Implementations:
1. Factories as singletons.
2. Creating the products.

** Builder pattern:
- Separate the construction of a complex object from its representation so that the same construction process can create different representations.
*** When to use:
- The algorithm for creating a complex object should be independent of the parts that make up the object and how they're assembled.
- The construction process must allow different representations for the object that's constructed.
*** Consequences:
1. It lets you vary a product's internal representation.
2. It isolates code for construction and representation.
3. It gives you finer control over the construction process.
*** Implementations:
- Assembing and the construction of the interface.
- Constructing the products

** Factory Method
- Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.
*** When to use:
- A class can't anticipate the class of objects it must create.
- A class wants its subclasses to specify the objects it creates.
- Classes delegate responsibility to one of several helper subclasses, and you want to localize the knowledge of which helper subclass is the delegate.
*** Implementations:
- Two major varieties: 
1. The case when the creator class is an abstract class and doesn't provide an implementation for the factory method it declares.
2. The case when the creator class is a concrete class and provides a default implementation for the factory method.
- Parmeterized factory methods.
- Language-specific variations and issues.
- Using templates to avoid subclassing.

** Prototype
- Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.

** Singleton
- Ensure a class only has one instance, and provide a global point of access to it.

** State
- Allow an object to alter it's behaviour when its internal state is changed.
